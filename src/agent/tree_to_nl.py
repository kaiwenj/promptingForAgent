import openai
import os
from dotenv import load_dotenv
from tree_class import Object, Location

# Load the API key from the .env file
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')

# Instantiate the OpenAI client
client = openai.OpenAI(api_key=openai_api_key)

# Function to convert a tree structure into a natural language description
def tree_to_nl(tree_root):
    """
    Converts a tree structure into a natural language description using GPT.

    Parameters:
    tree_root (Node): The root node of the tree structure.

    Returns:
    str: The natural language description generated by GPT.
    """

    # Recursively traverse the tree to gather the structure
    def traverse_tree(node):
        node_info = {
            "name": node.name,
            "type": node.type,
            "status": getattr(node, 'status', None),
            "contents": [traverse_tree(child) for child in node.children]
        }
        return node_info

    # Generate the tree structure in a format suitable for GPT
    tree_structure = traverse_tree(tree_root)

    # Convert the tree structure into a natural language description
    llm_output = prompt_llm_to_generate_nl(tree_structure)
    return llm_output

# Helper function to prompt GPT to generate a natural language description
def prompt_llm_to_generate_nl(tree_structure):
    """
    Prompts GPT to generate a natural language description based on the tree structure.

    Parameters:
    tree_structure (dict): The tree structure dictionary.

    Returns:
    str: The generated natural language description.
    """

    system_input_message = """
    The following dictionary describes a hierarchical structure of a location or object. Each node in the structure has a name, type, and possibly a status and contents. 
    Generate a natural language description that concisely but clearly describes the location or object, including its contents and their statuses. Be objective and concise.
    """

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_input_message},
            {"role": "user", "content": str(tree_structure)}
        ]
    )

    return response.choices[0].message.content

# Example tree to test the conversion
if __name__ == "__main__":
    # Sample tree structure (you can replace this with an actual tree)
    bar_building = Location("Bar Building")
    table = Object("Table", status="Clean", parent=bar_building)
    chair = Object("Chair", status="Available", parent=table)
    bar_counter = Object("Bar Counter", status="Wiped", parent=bar_building)

    # Convert the tree to a natural language description
    nl_description = tree_to_nl(bar_building)
    print(nl_description)
